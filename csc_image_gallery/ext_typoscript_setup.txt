/**
 * IMAGE_GALLERY
 *
 * The following adds a new TypoScript Content Object called IMAGE_GALLERY
 * It is based on FILES, but only for image rendering within css_styled_content tt_content.image and tt_content.textpic
 * The rendering is HTML5
 *
 * Not taking the following configuration into account:
 * - noRows
 * - textMargin (Not for the gallery itself, but CSS)
 * - image_compression (Can be done within the renderObj)
 * - image_effects (Can be done within the renderObj)
 * - imagecaption_position (
 */

lib.imageGallery = IMAGE_GALLERY
lib.imageGallery {

	# Define the image resource
	references {
		fieldName = image
	}

	# Settings for columns
	columns {
		# Set the amount of columns
		amount {
			field = imagecols
		}

		# Set the spacing between the columns
		spacing = {$styles.content.imgtext.colSpace}
	}

	# Set the width of the gallery
	width {
		cObject = COA
		cObject {
			# Use maxW when the gallery is outside the text
			# Override with register:maxImageWidth when set
			10 = TEXT
			10 {
				value = {$styles.content.imgtext.maxW}
				override {
					data = register:maxImageWidth
				}
				if {
					value = 15
					isLessThan {
						field = imageorient
					}
				}
			}
			# Use maxWInText when the gallery is inside the text
			# Override with register:maxImageWidthInText when set
			20 = TEXT
			20 {
				value = {$styles.content.imgtext.maxWInText}
				override {
					data = register:maxImageWidthInText
				}
				if {
					value = 16
					isGreaterThan {
						field = imageorient
					}
				}
			}
		}
	}

	# Settings for single image rendering
	image {
		# Set the height of a single image
		# When the total width exceeds the width of the gallery, the height will be adapted accordingly
		# Setting a height will overrule the setting image.height
		height {
			field = imageheight
		}
		# Set the width of a single image
		# When the total width exceeds the width of the gallery, the height will be adapted accordingly
		# When the setting image.height is set, width will not be taken into account
		width {
			field = imagewidth
		}
		# Border settings
		border {
			# Add border
			on {
				field = imageborder
			}
			# Width of the border
			width = {$styles.content.imgtext.borderThick}
			# Padding between border and image
			padding = {$styles.content.imgtext.borderSpace}
		}
	}

	# Render a single image object
	renderObj = COA
	renderObj {

		# Open a new row
		10 = TEXT
		10 {
			value = <div class="csc-textpic-imagerow">
			if {
				isTrue {
					data = register:GALLERY_COLUMN_ITERATION_FIRST
				}
			}
		}

		# Open a new column
		20 = TEXT
		20 {
			value = <div class="csc-textpic-imagecolumn">
			if {
				isTrue {
					data = register:GALLERY_IMAGE_ITERATION_FIRST
				}
			}
		}

		# The image with the caption (if available)
		30 = COA
		30 {
			# The image
			10 = IMAGE
			10 {
				file {
					import {
						data = file:current:publicUrl
					}
					width {
						data = register:GALLERY_CURRENT_IMAGE_WIDTH
					}
				}
				titleText {
					data = file:current:title
				}
				altText {
					data = file:current:alternative
				}
				stdWrap {
					typolink {
						parameter {
							data = file:current:link
						}
					}
				}
			}

			# The caption, if provided
			20 = TEXT
			20 {
				data = file:current:description
				wrap = <figcaption class="csc-textpic-caption"> | </figcaption>
				if {
					isTrue {
						data = file:current:description
					}
				}
			}

			wrap = <div class="csc-textpic-image"> | </div>
			wrap {
				override = <figure class="csc-textpic-image">|</figure>
				override {
					if {
						isTrue {
							data = file:current:description
						}
					}
				}
			}
		}

		# Close the column
		40 = TEXT
		40 {
			value = </div>
			if {
				isTrue {
					data = register:GALLERY_IMAGE_ITERATION_LAST
				}
			}
		}

		# Close the row
		50 = TEXT
		50 {
			value = </div>
			if {
				isTrue {
					data = register:GALLERY_COLUMN_ITERATION_LAST
				}
			}
		}
	}

	# Wrap around the whole gallery
	dataWrap {
		cObject = COA
		cObject {
			# Open the div
			10 = TEXT
			10 {
				value = <div
			}

			# Add the classes to the div
			20 = COA
			20 {
				# Default class
				10 = TEXT
				10 {
					value = csc-textpic-imagewrap
					noTrimWrap = || |
				}

				# Class for image borders
				20 = TEXT
				20 {
					value = csc-textpic-border
					noTrimWrap = || |
					if {
						isTrue {
							field = imageborder
						}
					}
				}
				stdWrap {
					trim = 1
					noTrimWrap = | class="|"|
					required = 1
				}
			}

			# Add the amount of columns in attribute "data-csc-cols" for responsive gallery
			30 = TEXT
			30 {
				data = register:GALLERY_COLUMNS_COUNT
				noTrimWrap = | data-csc-cols="|"|
			}

			# Add the amount of images in attribute "data-csc-images" for responsive gallery
			40 = TEXT
			40 {
				data = register:FILES_COUNT
				noTrimWrap = | data-csc-images="|"|
			}

			# Close the div
			50 = TEXT
			50 {
				value = > | </div>
			}
		}
	}

	# Extra wrap for centered gallery
	innerWrap = <div class="csc-textpic-center-outer"><div class="csc-textpic-center-inner"> | </div></div>
	innerWrap {
		if {
			# 0 = above-center, 8 = below-center
			value = 0,8
			isInList {
				field = imageorient
			}
		}
	}
}

tt_content.textpic >
tt_content.textpic = COA
tt_content.textpic {

	10 = COA
	10 {
		10 = < lib.stdheader
		if {
			# 25 = intext-right-nowrap, 26 = intext-left-nowrap
			value = 25,26
			isInList {
				field = imageorient
			}
			negate = 1
		}
	}

	20 = COA
	20 {
		# By default, the gallery is rendered in front of the text
		10 = < lib.imageGallery
		20 = COA
		20 {
			# Render the header in the div with text when no-wrap
			10 = < lib.stdheader
			10 {
				if {
					# 25 = intext-right-nowrap, 26 = intext-left-nowrap
					value = 25,26
					isInList {
						field = imageorient
					}
				}
			}

			20 < tt_content.text.20

			wrap = <div class="csc-textpic-text"> | </div>
		}

		stdWrap {
			# Override when gallery needs to be rendered after the text
			override {
				cObject = COA
				cObject {
					10 = COA
					10 {
						10 < tt_content.text.20

						wrap = <div class="csc-textpic-text"> | </div>
					}

					20 = < lib.imageGallery
				}
				if {
					# 8 = below-center, 9 = below-right, 10 = below-left
					value = 8,9,10
					isInList {
						field = imageorient
					}
				}
			}

			outerWrap {
				# Wrap text and gallery in a div with classes set to the image position and alignment
				cObject = CASE
				cObject {
					key {
						field = imageorient
					}

					# above-center
					default = TEXT
					default {
						value = <div class="csc-textpic csc-textpic-center csc-textpic-above"> | </div>
					}

					# above-right
					1 < .default
					1 {
						value = <div class="csc-textpic csc-textpic-right csc-textpic-above"> | </div>
					}

					# above-left
					2 < .default
					2 {
						value = <div class="csc-textpic csc-textpic-left csc-textpic-above"> | </div>
					}

					# below-center
					8 < .default
					8 {
						value = <div class="csc-textpic csc-textpic-center csc-textpic-below"> | </div>
					}

					# below-right
					9 < .default
					9 {
						value = <div class="csc-textpic csc-textpic-right csc-textpic-below"> | </div>
					}

					# below-left
					10 < .default
					10 {
						value = <div class="csc-textpic csc-textpic-left csc-textpic-below"> | </div>
					}

					# intext-right
					17 < .default
					17 {
						value = <div class="csc-textpic csc-textpic-intext-right"> | </div>
					}

					# intext-left
					18 < .default
					18 {
						value = <div class="csc-textpic csc-textpic-intext-left"> | </div>
					}

					# intext-right-nowrap
					25 < .default
					25 {
						value = <div class="csc-textpic csc-textpic-intext-right-nowrap {register:GALLERY_CLASS}"> | </div>
						insertData = 1
					}

					# intext-left-nowrap
					26 < .default
					26 {
						value = <div class="csc-textpic csc-textpic-intext-left-nowrap {register:GALLERY_CLASS}"> | </div>
						insertData = 1
					}
				}
			}
		}
	}
}

tt_content.image >
tt_content.image < tt_content.textpic
tt_content.image {

	10 = < lib.stdheader

	20 {
		20 >
		stdWrap {
			override >
		}
	}
}

plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE >
plugin.tx_cssstyledcontent._CSS_DEFAULT_STYLE (
	/* Headers */
	.csc-header-alignment-center { text-align: center; }
	.csc-header-alignment-right { text-align: right; }
	.csc-header-alignment-left { text-align: left; }

	div.csc-textpic-responsive, div.csc-textpic-responsive * { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;  }

	/* Clear floats after csc-textpic and after csc-textpic-imagerow */
	div.csc-textpic, div.csc-textpic div.csc-textpic-imagerow, ul.csc-uploads li { overflow: hidden; }

	/* Settings for figure and figcaption */
	div.csc-textpic .csc-textpic-imagewrap figure, div.csc-textpic figure.csc-textpic-imagewrap { margin: 0; display: table; }

	/* Captions */
	figcaption.csc-textpic-caption { display: table-caption; }
	.csc-textpic-caption { text-align: left; caption-side: bottom; }
	div.csc-textpic-caption-c .csc-textpic-caption, .csc-textpic-imagewrap .csc-textpic-caption-c { text-align: center; }
	div.csc-textpic-caption-r .csc-textpic-caption, .csc-textpic-imagewrap .csc-textpic-caption-r { text-align: right; }
	div.csc-textpic-caption-l .csc-textpic-caption, .csc-textpic-imagewrap .csc-textpic-caption-l { text-align: left; }

	/* Float the columns */
	div.csc-textpic div.csc-textpic-imagecolumn { float: left; }

	/* Border just around the image */
	.csc-textpic-border .csc-textpic-image {
		border: {$styles.content.imgtext.borderThick}px solid {$styles.content.imgtext.borderColor};
		padding: {$styles.content.imgtext.borderSpace}px;
	}
	div.csc-textpic-imagewrap img { border: none; display: block; }

	/* Space below each row, except for last row */
	div.csc-textpic-imagerow { margin-bottom: {$styles.content.imgtext.rowSpace}px; }
	div.csc-textpic-imagerow:last-child { margin-bottom: 0; }

	/* Space around image columns, except for last column */
	div.csc-textpic-imagecolumn { margin-right: {$styles.content.imgtext.colSpace}px; }
	div.csc-textpic-imagecolumn:last-child { margin-right: 0; }

	/* Add margin from image-block to text (in case the block is in the text) */
	div.csc-textpic-intext-left .csc-textpic-imagewrap { margin: 0 {$styles.content.imgtext.textMargin}px {$styles.content.imgtext.textMargin}px 0; }
	div.csc-textpic-intext-left-nowrap .csc-textpic-imagewrap { margin-right: {$styles.content.imgtext.textMargin}px; }
	div.csc-textpic-intext-right .csc-textpic-imagewrap{ margin: 0 0 {$styles.content.imgtext.textMargin}px {$styles.content.imgtext.textMargin}px; }
	div.csc-textpic-intext-right-nowrap .csc-textpic-imagewrap { margin-left: {$styles.content.imgtext.textMargin}px; }

	/* Positioning of images: */

	/* Center (above or below) */
	div.csc-textpic-center .csc-textpic-imagewrap, div.csc-textpic-center figure.csc-textpic-imagewrap { overflow: hidden; }
	div.csc-textpic-center .csc-textpic-center-outer { position: relative; float: right; right: 50%; }
	div.csc-textpic-center .csc-textpic-center-inner { position: relative; float: right; right: -50%; }

	/* Right (above or below) */
	div.csc-textpic-right .csc-textpic-imagewrap { float: right; }
	div.csc-textpic-right div.csc-textpic-text { clear: right; }

	/* Left (above or below) */
	div.csc-textpic-left .csc-textpic-imagewrap { float: left; }
	div.csc-textpic-left div.csc-textpic-text { clear: left; }

	/* Left (in text, in text no wrap) */
	div.csc-textpic-intext-left .csc-textpic-imagewrap, div.csc-textpic-intext-left-nowrap .csc-textpic-imagewrap { float: left; }

	/* Right (in text, in text no wrap) */
	div.csc-textpic-intext-right .csc-textpic-imagewrap, div.csc-textpic-intext-right-nowrap .csc-textpic-imagewrap { float: right; }

	div.csc-textpic div.csc-textpic-imagerow-last, div.csc-textpic div.csc-textpic-imagerow-none div.csc-textpic-last { margin-bottom: 0; }

	/* Positioning of text: */
	div.csc-textpic-intext-left-nowrap .csc-textpic-text, div.csc-textpic-intext-right-nowrap .csc-textpic-text { width: auto; overflow: hidden; }

	/* Browser fixes: */

	/* Fix for unordered and ordered list with image "In text, left" */
	.csc-textpic-intext-left ol, .csc-textpic-intext-left ul { padding-left: 40px; overflow: auto; }

	/* File Links */
	ul.csc-uploads { padding: 0; }
	ul.csc-uploads li { list-style: none outside none; margin: 1em 0; }
	ul.csc-uploads img { float: left; padding-right: 1em; vertical-align: top; }
	ul.csc-uploads span { display: block; }
	ul.csc-uploads span.csc-uploads-fileName { text-decoration: underline; }

	/* Table background colors: */

	table.contenttable-color-1 { background-color: {$styles.content.table.backgroundColor.1}; }
	table.contenttable-color-2 { background-color: {$styles.content.table.backgroundColor.2}; }
	table.contenttable-color-240 { background-color: {$styles.content.table.backgroundColor.240}; }
	table.contenttable-color-241 { background-color: {$styles.content.table.backgroundColor.241}; }
	table.contenttable-color-242 { background-color: {$styles.content.table.backgroundColor.242}; }
	table.contenttable-color-243 { background-color: {$styles.content.table.backgroundColor.243}; }
	table.contenttable-color-244 { background-color: {$styles.content.table.backgroundColor.244}; }
)